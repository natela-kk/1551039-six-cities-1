import { Container } from 'inversify';
import { LoggerInterface } from './common/logger/logger.interface.js';
import ConfigService from './common/config/config.service.js';
import LoggerService from './common/logger/logger.service.js';
import { Component } from './types/component.types.js';
import { ConfigInterface } from './common/config/config.interface.js';
import Application from './app/application.js';
import DatabaseService from './common/database-client/database.servise.js';
import { DatabaseInterface } from './common/database-client/database.interface.js';
import UserService from './modules/user/user.service.js';
import { UserServiceInterface } from './modules/user/user-service.interface.js';
import { UserEntity, UserModel } from './modules/user/user.entity.js';
import { ModelType} from '@typegoose/typegoose/lib/types.js';
import OfferService from './modules/offer/offer.service.js';
import { OfferServiceInterface } from './modules/offer/offer-service.interface.js';
import { OfferEntity, OfferModel } from './modules/offer/offer.entity.js';
import ExceptionFilter from './common/errors/exeption-filter.js';
import { ExceptionFilterInterface } from './common/errors/exception-filter.interface.js';
import UserController from './modules/user/user.controller.js';
import { ControllerInterface } from './common/controller/controller.interface.js';
import OfferController from './modules/offer/offer.controller.js';
import CommentService from './modules/comment/comment.service.js';
import {CommentServiceInterface} from './modules/comment/comment-service.interface.js';
import {CommentEntity, CommentModel} from './modules/comment/comment.entity.js';
import CommentController from './modules/comment/comment.controller.js';
import { FavoriteServiceInterface } from './modules/favorite/favorite-service.interface.js';
import FavoriteService from './modules/favorite/favorite.service.js';
import FavoriteController from './modules/favorite/favorite.controller.js';
import { FavoriteEntity, FavoriteModel } from './modules/favorite/favorite.entity.js';

const applicationContainer = new Container();
applicationContainer.bind<Application>(Component.Application).to(Application).inSingletonScope();
applicationContainer.bind<LoggerInterface>(Component.LoggerInterface).to(LoggerService).inSingletonScope();
applicationContainer.bind<ConfigInterface>(Component.ConfigInterface).to(ConfigService).inSingletonScope();
applicationContainer.bind<DatabaseInterface>(Component.DatabaseInterface).to(DatabaseService).inSingletonScope();
applicationContainer.bind<UserServiceInterface>(Component.UserServiceInterface).to(UserService);
applicationContainer.bind<ModelType<UserEntity>>(Component.UserModel).toConstantValue(UserModel);
applicationContainer.bind<OfferServiceInterface>(Component.OfferServiceInterface).to(OfferService);
applicationContainer.bind<ModelType<OfferEntity>>(Component.OfferModel).toConstantValue(OfferModel);
applicationContainer.bind<ExceptionFilterInterface>(Component.ExeptionFilterInterface).to(ExceptionFilter).inSingletonScope();
applicationContainer.bind<ControllerInterface>(Component.UserController).to(UserController).inSingletonScope();
applicationContainer.bind<ControllerInterface>(Component.OfferController).to(OfferController).inSingletonScope();
applicationContainer.bind<CommentServiceInterface>(Component.CommentServiceInterface).to(CommentService).inSingletonScope();
applicationContainer.bind<ModelType<CommentEntity>>(Component.CommentModel).toConstantValue(CommentModel);
applicationContainer.bind<ControllerInterface>(Component.CommentController).to(CommentController).inSingletonScope();
applicationContainer.bind<FavoriteServiceInterface>(Component.FavoriteServiceInterface).to(FavoriteService).inSingletonScope();
applicationContainer.bind<ModelType<FavoriteEntity>>(Component.FavoriteModel).toConstantValue(FavoriteModel);
applicationContainer.bind<ControllerInterface>(Component.FavoriteController).to(FavoriteController).inSingletonScope();

const application = applicationContainer.get<Application>(Component.Application);
await application.init();
